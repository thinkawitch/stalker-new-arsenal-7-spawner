

class "main_menu" (CUIScriptWnd)

function main_menu:__init() super()
   self:SetFont(GetFontMedium()) --set base font for dialog.
   self.mbox_mode = 0
   self:InitControls()
   self:InitCallBacks()
end

function main_menu:__finalize()

end

function main_menu:InitControls()
	self:Init(0,0,1024,768)
	local xml = CScriptXmlInit()
	xml:ParseFile					("ui_mm_main.xml")
   	xml:InitStatic("crow_movie", self)
   	xml:InitStatic("water_movie", self)
	xml:InitStatic("background", self)
    self.shniaga = xml:InitMMShniaga("shniaga_wnd",self);

	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box, "msg_box")

	local _ver = xml:InitStatic		("static_version",self)
	local mm = _G.main_menu.get_main_menu()
	_ver:SetText	("New Arsenal v7.0   " .. mm:GetGSVer())
end

function main_menu:Show(...)
	self.shniaga:SetVisibleMagnifier(...)
end


function main_menu:InitCallBacks()
	-- new game
	self:AddCallback("btn_novice",		ui_events.BUTTON_CLICKED,				self.OnButton_new_novice_game,		self)
	self:AddCallback("btn_stalker",		ui_events.BUTTON_CLICKED,				self.OnButton_new_stalker_game,		self)
	self:AddCallback("btn_veteran",		ui_events.BUTTON_CLICKED,				self.OnButton_new_veteran_game,		self)
	self:AddCallback("btn_master",		ui_events.BUTTON_CLICKED,				self.OnButton_new_master_game,		self)

	-- options
	self:AddCallback("btn_options",     ui_events.BUTTON_CLICKED,				self.OnButton_options_clicked,		self)
	-- load
	self:AddCallback("btn_load",        ui_events.BUTTON_CLICKED,				self.OnButton_load_clicked,			self)
	-- save
	self:AddCallback("btn_save",		ui_events.BUTTON_CLICKED,				self.OnButton_save_clicked,			self)
	-- quit
	self:AddCallback("btn_quit",		ui_events.BUTTON_CLICKED,				self.OnButton_quit_clicked,			self)
	self:AddCallback("btn_quit_to_mm",	ui_events.BUTTON_CLICKED,				self.OnButton_disconnect_clicked,	self)
	self:AddCallback("btn_lastsave",	ui_events.BUTTON_CLICKED,				self.OnButton_last_save,			self)
	self:AddCallback("btn_credits",		ui_events.BUTTON_CLICKED,				self.OnButton_credits_clicked,		self)
	-- message box
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_OK_CLICKED,		self.OnMsgOk,						self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_CANCEL_CLICKED,	self.OnMsgCancel,					self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_YES_CLICKED,		self.OnMsgYes,						self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_NO_CLICKED,		self.OnMsgNo,						self)
	self:Connect("msg_box", ui_events.MESSAGE_BOX_QUIT_GAME_CLICKED, cmd, "disconnect")
	self:Connect("msg_box", ui_events.MESSAGE_BOX_QUIT_WIN_CLICKED,  cmd, "quit")
	self:AddCallback("btn_ret",			ui_events.BUTTON_CLICKED,				self.OnButton_return_game,			self)
end
function main_menu:OnMsgOk()
	self.mbox_mode = 0
end

function main_menu:OnMsgCancel()
	self.mbox_mode = 0
end

function main_menu:LoadLastSave()
	cmd("load_last_save")
	self:close_and_delete_menu()
end


function main_menu:OnMsgYes()

	if 	self.mbox_mode == 1 then
		self:LoadLastSave()
	end

	self.mbox_mode = 0
end

function main_menu:OnMsgNo()
	self.mbox_mode = 0
end


function main_menu:OnButton_last_save()
	if not alife() then
		self:LoadLastSave()
		return
	end

	self.mbox_mode			= 1
	self.message_box:Init	("message_box_confirm_load_save")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnButton_credits_clicked()
	game.start_tutorial("credits_seq")
end

function main_menu:OnButton_quit_clicked()
	self.message_box:Init("message_box_quit_windows")
	self:GetHolder():start_stop_menu(self.message_box, true)
end


function main_menu:OnButton_disconnect_clicked()
	self.message_box:Init("message_box_quit_game")
	self.message_box:SetText("ui_mm_quit_game_message")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnButton_return_game()
	local console = get_console()

	if level.present() and level.get_game_difficulty() == 3 then
		console:execute("hud_info off")
		console:execute("hud_crosshair off")
		console:execute("hud_crosshair_dist off")
		console:execute("g_ammunition_on_belt on")
	end

	self:close_and_delete_menu()
end

function main_menu:OnButton_new_novice_game()
	local console = get_console()
    console:enable_command("g_game_difficulty")
	console:execute("g_game_difficulty gd_novice")
    console:disable_command("g_game_difficulty")
	self:StartGame()
end

function main_menu:OnButton_new_stalker_game()
	local console = get_console()
    console:enable_command("g_game_difficulty")
	console:execute("g_game_difficulty gd_stalker")
    console:disable_command("g_game_difficulty")
	self:StartGame()
end

function main_menu:OnButton_new_veteran_game()
	local console = get_console()
    console:enable_command("g_game_difficulty")
	console:execute("g_game_difficulty gd_veteran")
    console:disable_command("g_game_difficulty")
	self:StartGame()
end

function main_menu:OnButton_new_master_game()
	local console = get_console()
    console:enable_command("g_game_difficulty")
	console:execute("g_game_difficulty gd_master")
    console:disable_command("g_game_difficulty")
	self:StartGame()
end

function main_menu:StartGame()
	if alife() then
		cmd("disconnect")
	end
	cmd("start server(all/single/alife/new)")
	self:close_and_delete_menu()
end

function main_menu:OnButton_save_clicked()
	if self.save_dlg == nil then
		self.save_dlg = ui_save_dialog.save_dialog()
		self.save_dlg.owner = self
	end

    self.save_dlg:FillList()
	self:GetHolder():start_stop_menu(self.save_dlg, true)
	self:Show(false)
end

function main_menu:OnButton_load_clicked()
	if self.load_dlg ==nil then
		self.load_dlg = ui_load_dialog.load_dialog()
		self.load_dlg.owner = self
	end

    self.load_dlg:FillList()
	self:GetHolder():start_stop_menu(self.load_dlg, true)
	self:Show(false)
end

function main_menu:OnButton_options_clicked()
	if self.opt_dlg == nil then
		self.opt_dlg = ui_mm_opt_main.options_dialog()
		self.opt_dlg.owner = self
	end

	self:GetHolder():start_stop_menu(self.opt_dlg, true)
	self:Show(false)
end

function main_menu:OnKeyboard(dik, keyboard_action)  --virtual function

	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)

	local bind = dik_to_bind(dik)
	local console = get_console()

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik_to_bind(dik) == key_bindings.kQUIT then
			if level.present() and db.actor and db.actor:alive() then
				if level.get_game_difficulty() == 3 then
					console:execute("hud_info off")
					console:execute("hud_crosshair off")
					console:execute("hud_crosshair_dist off")
					console:execute("g_ammunition_on_belt on")
				end
				self:close_and_delete_menu()
			end
		end

--		if dik == DIK_keys.DIK_P then --SDATA
--			if level.present() and db.actor and db.actor:alive() then
--				if not _sdata.GlobalEnable then
--					_sdata.subscribe()
--				else
--					_sdata.unsubscribe()
--				end
--			end
--		end
		
--		if dik == DIK_keys.DIK_S then
--            db.actor:give_money(15000)
--			weap_my.main()
--		end
--

		-- if dik == DIK_keys.DIK_F1 then -- открыть чит по F1
		if dik == DIK_keys.DIK_INSERT then -- открыть чит по INSERT
		    ui_cheat_main.start_menu(self)
		end
		

		if dik == DIK_keys.DIK_Q then
		    local console = get_console()
		    console:execute("quit")			
		end

--		if dik == DIK_keys.DIK_N then
--			xpcall(function() dofile(getFS():update_path("$game_scripts$", "personal_test.script")) end, log1)
--		end

		return true
	end
   
	return false
end

--Для закрытия меню использовать только этот специальный метод!
function main_menu:close_and_delete_menu()
	-- Удаляем в движке каллбеки, в которых хранятся ссылки на объекты оконных классов (которые добавляются в AddCallback(..., self),
	-- иначе части меню не удалятся и будут висеть в памяти до перезапуска LUA (до загрузки сейва, например)
	-- Так же, надо обнулить висячие ссылки (self.*_dlg), иначе сборщик мусора эти объекты не удалит. Да, это странно, но это так.
	if self.save_dlg then self.save_dlg:ClearCallbacks() self.save_dlg = nil end
	if self.load_dlg then self.load_dlg:ClearCallbacks() self.load_dlg = nil end
	if self.opt_dlg then
		self.opt_dlg:ClearCallbacks()
		self.opt_dlg = nil
	end
	self:ClearCallbacks() --main_menu удаляется движком, но для надёжности и ему каллбеки удалим.
	--
	cmd("main_menu off")
end
